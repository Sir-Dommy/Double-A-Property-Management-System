/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package double_a;


import java.awt.print.PrinterException;
import java.sql.*;

import java.util.Calendar;
import javax.swing.JOptionPane;

/**
 *
 * @author domin
 */
public class Rent_Receipt extends javax.swing.JFrame {

    public static final String USERNAME="root";
    public static final String PASSWORD="97009307";
    public static final String CONN ="jdbc:mysql://localhost:3306/double_a?useSSL=false";
    
    Connection con=null;
    ResultSet rs=null;
    PreparedStatement pst=null;
    double balance;
    int rentTotal;
    
     Calendar c=Calendar.getInstance();
        int day=c.get(Calendar.DAY_OF_MONTH);
        int month=c.get(Calendar.MONTH);
        int year=c.get(Calendar.YEAR);
    
    
    public Rent_Receipt() {
        initComponents();
        
        /**if(day>10 && balance>0){
            balance=balance*0.05;
        }**/
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        amount = new javax.swing.JLabel();
        hnumber = new javax.swing.JLabel();
        aname = new javax.swing.JLabel();
        lname = new javax.swing.JLabel();
        tenant = new javax.swing.JLabel();
        hsize = new javax.swing.JLabel();
        Amount = new javax.swing.JTextField();
        Hnumber = new javax.swing.JTextField();
        occupant = new javax.swing.JTextField();
        Lname = new javax.swing.JTextField();
        Aname = new javax.swing.JTextField();
        Hsize = new javax.swing.JComboBox<>();
        jButtonGenerateReceipt = new javax.swing.JButton();
        jButtonReset = new javax.swing.JButton();
        jButtonPrint = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        area = new javax.swing.JTextArea();
        tenant1 = new javax.swing.JLabel();
        occupant_name = new javax.swing.JTextField();
        jButtonPrintAutoFill = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setLocation(new java.awt.Point(300, 50));
        setSize(new java.awt.Dimension(790, 940));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Rent Receipt");

        amount.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        amount.setText("Amount paid");

        hnumber.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        hnumber.setText("House Number");

        aname.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        aname.setText("Agent Name");

        lname.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lname.setText("Landlord Name");

        tenant.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        tenant.setText("Tenant Name");

        hsize.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        hsize.setText("House Size");

        Amount.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        Hnumber.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        occupant.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        Lname.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        Aname.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        Hsize.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        Hsize.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Small Size", "Medium Size", "Large Size" }));

        jButtonGenerateReceipt.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButtonGenerateReceipt.setText("Generate Receipt");
        jButtonGenerateReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerateReceiptActionPerformed(evt);
            }
        });

        jButtonReset.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButtonReset.setText("Reset");
        jButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetActionPerformed(evt);
            }
        });

        jButtonPrint.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButtonPrint.setText("Print");
        jButtonPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintActionPerformed(evt);
            }
        });

        area.setEditable(false);
        area.setColumns(20);
        area.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        area.setRows(5);
        jScrollPane1.setViewportView(area);

        tenant1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        tenant1.setText("Tenant Id");

        occupant_name.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        jButtonPrintAutoFill.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButtonPrintAutoFill.setText("Auto Fill");
        jButtonPrintAutoFill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintAutoFillActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(255, 255, 255));
        jButton4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 0, 0));
        jButton4.setText("Close");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tenant1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(occupant, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(tenant, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(208, 208, 208))
                        .addComponent(jButtonPrintAutoFill))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lname)
                            .addGap(39, 39, 39)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(Lname, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(occupant_name, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(39, 39, 39)
                            .addComponent(Amount, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(hnumber, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(39, 39, 39)
                            .addComponent(Hnumber, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(aname, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(39, 39, 39)
                            .addComponent(Aname, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(hsize, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(26, 26, 26)
                            .addComponent(Hsize, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jButtonReset)
                            .addGap(37, 37, 37)
                            .addComponent(jButtonGenerateReceipt)
                            .addGap(18, 18, 18)
                            .addComponent(jButtonPrint))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addGap(340, 340, 340))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(occupant)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 11, Short.MAX_VALUE)
                                .addComponent(tenant1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonPrintAutoFill)
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tenant, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(occupant_name, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Amount, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hnumber, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Hnumber, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(aname, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Aname, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lname, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Lname, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Hsize, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hsize, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonPrint)
                            .addComponent(jButtonGenerateReceipt)
                            .addComponent(jButtonReset)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jButton4)
                .addGap(874, 874, 874))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonGenerateReceiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerateReceiptActionPerformed
       String date=""+day+"-"+month+"-"+year+"";
       
       try{
          double d= Double.parseDouble(Amount.getText());
           if(d>0){
               
               if(day>0){
            try{
            con=DriverManager.getConnection(CONN,USERNAME,PASSWORD); 
            
           
           
           String sele="SELECT * FROM rentStatement WHERE tenant_id=?";
           
           pst=con.prepareStatement(sele);
           pst.setString(1,occupant.getText());
           rs=pst.executeQuery();
           
           while(rs.next()){
               balance=Double.parseDouble(rs.getString("balance"));
           
                   
               
                
                
                
                
           
           }
           balance=balance-Double.parseDouble(Amount.getText());
           
           
           
           
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null,e);
            
        }
        try{
            con=DriverManager.getConnection(CONN,USERNAME,PASSWORD); 
            String insert ="INSERT INTO rentStatement (tenant_id,ag_code, amount, date, balance, landlord_id) VALUES (?,?,?,?,?,?)";
           pst=con.prepareStatement(insert);
           pst.setString(1,occupant.getText());
           pst.setString(2,Aname.getText());
           pst.setString(3, Amount.getText());
           pst.setString(4,date );
           pst.setDouble(5,balance);
           pst.setString(6,Lname.getText());
           pst.executeUpdate();
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null,e);
        }
       
        area.setText("***************************************************\n");
        area.setText(area.getText()+"                      Rent   Receipt\n");
        area.setText(area.getText()+"***************************************************\n\n");
        area.setText(area.getText()+"                                   "+day+"-"+month+"-"+year+"\n");
        area.setText(area.getText()+tenant.getText()+":    "+occupant_name.getText()+"\n\n");
        area.setText(area.getText()+tenant.getText()+ " :    "+occupant.getText()+"\n\n");
        area.setText(area.getText()+amount.getText()+ ":    "+Amount.getText()+".00"+ "\n\n");
        area.setText(area.getText()+hnumber.getText()+ ":    "+Hnumber.getText()+"\n\n");
        area.setText(area.getText()+aname.getText()+ ":    "+Aname.getText()+"\n\n");
        area.setText(area.getText()+lname.getText()+ ":    "+Lname.getText()+"\n\n");
        area.setText(area.getText()+hsize.getText()+ ":    "+Hsize.getSelectedItem()+"\n\n");
        area.setText(area.getText()+"                  BALANCE: "+balance+"\n\n");
        area.setText(area.getText()+"Signature.......................");
        }
        
        else{
            JOptionPane.showMessageDialog(null,"Enter Valid Amount\n"
                                                + "1. Amount MUST be Greater Than 0\n"
                                                + "2. Amount Should NOT contain Characters\n"
                                                + "   or Panctuation Marks\n\n\n");
        }
        // TODO add your handling code here:
        
        
       /** Thread t=new Thread(){
          public void run(){
              String sel="SELECT * FROM rentStatement WHERE tenant_id =?";
              try{
                  con=DriverManager.getConnection(CONN,USERNAME,PASSWORD);
                  pst=con.prepareStatement(sel);
                  pst.setString(1, occupant.getText());
                  
                  rs=pst.executeQuery();
                  
                  while(rs.next()){
                      balance=Double.parseDouble(rs.getString("balance"));
                      balance= balance* 0.005;
                      
                  }
                String inse="INSERT INTO rentStatement (tenant_id,ag_code, amount, date, balance, landlord_id) VALUES (?,?,?,?,?,?)";  
                 con=DriverManager.getConnection(CONN,USERNAME,PASSWORD);
                 pst=con.prepareStatement(inse);
                 pst.setString(1,occupant.getText());
                    pst.setString(1,occupant.getText());
                    pst.setString(2,Aname.getText());
                    pst.setString(3, Amount.getText());
                    pst.setString(4,date );
                    pst.setDouble(5,balance);
                    pst.setString(6,Lname.getText());
                    pst.executeUpdate();
              }
              catch(Exception e){
                  JOptionPane.showMessageDialog(null, e);
              }
              
              
          }  
        };
        **/
        try{
            con = DriverManager.getConnection(CONN,USERNAME,PASSWORD);
            pst=con.prepareStatement("UPDATE tenants\n" +
"                                     SET balance=?\n" +
"                                       WHERE id_number=?;");
            pst.setDouble(1, balance);
            pst.setString(2,occupant.getText());
            
            pst.executeUpdate();
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null,e);
        }
        if(balance <1){
            try{
                con=DriverManager.getConnection(CONN,USERNAME,PASSWORD);
                pst=con.prepareStatement("UPDATE tenants\n"
                                         + "SET status='Paid'\n"
                                         + "WHERE id_number=?; ");
                pst.setString(1,occupant.getText());
                pst.executeUpdate();
            }
            catch(SQLException e){
                JOptionPane.showMessageDialog(null,e);
            }
            
        }
        else{
                               try{
                con=DriverManager.getConnection(CONN,USERNAME,PASSWORD);
                pst=con.prepareStatement("UPDATE tenants\n"
                                         + "SET status='Not Paid'\n"
                                         + "WHERE id_number=?; ");
                pst.setString(1,occupant.getText());
                pst.executeUpdate();
            }
            catch(SQLException e){
                JOptionPane.showMessageDialog(null,e);
            } 
                    }
               
           }
           else{
               JOptionPane.showMessageDialog(null,"     Enter Valid Values\n"
                                                    + "1. Amount Should not be Blank or Less Than 1\n"
                                                    + "2. Ensure That All fields are Filled\n\n");
           }
       }
       catch(NumberFormatException e){
           
           JOptionPane.showMessageDialog(null,"ERROR: "+ e+"\n\n\n"
                   + "1. Amount Must Not Be Blank\n"
                   + "2. Amount Should NOT include Characters or Symbools ");
           
       }
       
        
        
    }//GEN-LAST:event_jButtonGenerateReceiptActionPerformed

    private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetActionPerformed
        occupant_name.setText(null);
        occupant.setText(null);
        Amount.setText(null);
        Hnumber.setText(null);
        Aname.setText(null);
        Lname.setText(null);
        area.setText(null);// TODO add your handling code here:
    }//GEN-LAST:event_jButtonResetActionPerformed

    private void jButtonPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrintActionPerformed
        if(area.getText().length()>1){
            
                try{
            area.print();
        }catch(PrinterException e){
            System.err.print(e);
        }
            
        }
        else{
            
        JOptionPane.showMessageDialog(null,"\n\nCannot Print Blank Recipt\n\n");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonPrintActionPerformed

    private void jButtonPrintAutoFillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrintAutoFillActionPerformed
          try{
              String sel="SELECT * FROM tenants WHERE id_number=?";
              con=DriverManager.getConnection(CONN,USERNAME,PASSWORD);
              pst=con.prepareStatement(sel);
              pst.setString(1,occupant.getText());
              rs=pst.executeQuery();
              
              if(rs.next()){
                  pst.setString(1,occupant.getText());
           
           occupant_name.setText(rs.getString("fname")+" "+rs.getString("sname"));
           Hnumber.setText(rs.getString("a_h_number"));
           Amount.setText(null);
           Aname.setText(rs.getString("ag_code"));
           Lname.setText(rs.getString("l_code"));
           Hsize.setSelectedItem(rs.getString("t_house"));
              }
              else{
                  JOptionPane.showMessageDialog(null, "Tenant Does NOT Exist!");
                  occupant.setText(null);
                  occupant_name.setText(null);
                    Amount.setText(null);
                    Hnumber.setText(null);
                    Aname.setText(null);
                    Lname.setText(null);
                    area.setText(null);
              }
          }
          catch(Exception e){
              JOptionPane.showMessageDialog(null,e);
          }
    }//GEN-LAST:event_jButtonPrintAutoFillActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        System.exit(0);// TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Rent_Receipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Rent_Receipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Rent_Receipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Rent_Receipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Rent_Receipt().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Amount;
    private javax.swing.JTextField Aname;
    private javax.swing.JTextField Hnumber;
    private javax.swing.JComboBox<String> Hsize;
    private javax.swing.JTextField Lname;
    private javax.swing.JLabel amount;
    private javax.swing.JLabel aname;
    private javax.swing.JTextArea area;
    private javax.swing.JLabel hnumber;
    private javax.swing.JLabel hsize;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButtonGenerateReceipt;
    private javax.swing.JButton jButtonPrint;
    private javax.swing.JButton jButtonPrintAutoFill;
    private javax.swing.JButton jButtonReset;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lname;
    private javax.swing.JTextField occupant;
    private javax.swing.JTextField occupant_name;
    private javax.swing.JLabel tenant;
    private javax.swing.JLabel tenant1;
    // End of variables declaration//GEN-END:variables
}
